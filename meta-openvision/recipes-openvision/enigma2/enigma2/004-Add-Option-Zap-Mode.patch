From b20a136cff4aeb9b299e508f90f0270044b218d7 Mon Sep 17 00:00:00 2001
From: fairbird, RAED <rrrr53@hotmail.com>
Date: Fri, 5 Mar 2021 14:55:06 +0300
Subject: Add Option Zap channels Mode (Black/Hold) Screen for dreambox

---

diff --git a/data/setup.xml b/data/setup.xml
index 638ca67..de0f72c 100644
--- a/data/setup.xml
+++ b/data/setup.xml
@@ -249,6 +249,7 @@
 		<item level="1" text="Zap key delay for channel number input" description="In live view wait this many seconds after a numeric key press before assuming the required channel number has been entered. Default: 5 seconds. Setting zero will require confirmation with 'OK'. ">config.misc.zapkey_delay</item>
 		<item level="2" text="Show picons during channel number input" description="Configure whether service picons will be shown in number zap.">config.misc.numzap_picon</item>
 		<item level="1" text="Zap mode" requires="ZapMode" description="Configure the way in which your %s %s changes channels.">config.misc.zapmode</item>
+		<item level="1" text="Zap mode" description="Configure the way in which your %s %s changes channels.">config.misc.zapmodeDM</item>
 		<item level="2" text="Number of digits in channel number" description="This allows you to set the number of digits you can input when selecting channels using number input.">config.usage.maxchannelnumlen</item>
 		<item level="2" text="Enable teletext caching" description="When enabled, teletext pages will be cached, allowing faster access.">config.usage.enable_tt_caching</item>
 		<item level="1" text="Teletext font and resolution" description="Configure the display resolution and the font used for teletext.">config.usage.tuxtxt_font_and_res</item>
diff --git a/lib/python/Components/UsageConfig.py b/lib/python/Components/UsageConfig.py
index 0dff999..973c5f3 100644
--- a/lib/python/Components/UsageConfig.py
+++ b/lib/python/Components/UsageConfig.py
@@ -1329,6 +1329,12 @@ def InitUsageConfig():
 		])
 		config.misc.zapmode.addNotifier(setZapmode, immediate_feedback=False)
 
+	if not BoxInfo.getItem("ZapMode") and exists("/proc/stb/info/model"):
+		def setZapmodeDM(el):
+			print('[UsageConfig] >>> zapmodeDM')
+		config.misc.zapmodeDM = ConfigSelection(default="black", choices=[("black", _("Black screen")), ("hold", _("Hold screen"))])
+		config.misc.zapmodeDM.addNotifier(setZapmodeDM, immediate_feedback = False)
+
 	if BoxInfo.getItem("HasBypassEdidChecking"):
 		def setHasBypassEdidChecking(configElement):
 			open(SystemInfo["HasBypassEdidChecking"], "w").write("00000001" if configElement.value else "00000000")
diff --git a/lib/dvb/decoder.cpp b/lib/dvb/decoder.cpp
--- a/lib/dvb/decoder.cpp
+++ b/lib/dvb/decoder.cpp
@@ -1,6 +1,7 @@
 #include <lib/base/cfile.h>
 #include <lib/base/ebase.h>
 #include <lib/base/eerror.h>
+#include <lib/base/nconfig.h> // access to python config
 #include <lib/base/wrappers.h>
 #include <lib/dvb/decoder.h>
 #include <lib/components/tuxtxtapp.h>
@@ -329,12 +330,14 @@ eDVBVideo::eDVBVideo(eDVBDemux *demux, int dev)
 		m_fd_demux = -1;
 	}
 
-#ifndef DREAMBOX
+std::string zapmodeDM = eConfigManager::getConfigValue("config.misc.zapmodeDM");
+if (zapmodeDM == "hold")
+{
 	if (m_fd >= 0)
 	{
 		::ioctl(m_fd, VIDEO_SELECT_SOURCE, demux ? VIDEO_SOURCE_DEMUX : VIDEO_SOURCE_HDMI);
 	}
-#endif
+}
 	if (m_close_invalidates_attributes < 0)
 	{
 		/*
